# ============================================================================
# HealthFlow RCM - Production Docker Compose
# Complete stack with monitoring
# ============================================================================

version: '3.8'

services:
  # ==================== DATABASE ====================
  postgres:
    image: postgres:14-alpine
    container_name: healthflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-healthflow_prod}
      POSTGRES_USER: ${POSTGRES_USER:-healthflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - healthflow-network

  # ==================== REDIS ====================
  redis:
    image: redis:7-alpine
    container_name: healthflow-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - healthflow-network

  # ==================== BACKEND ====================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: healthflow-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # HCX Configuration
      HCX_BASE_URL: ${HCX_BASE_URL}
      HCX_PARTICIPANT_CODE: ${HCX_PARTICIPANT_CODE}
      HCX_USERNAME: ${HCX_USERNAME}
      HCX_PASSWORD: ${HCX_PASSWORD}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Application
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: INFO
      
    volumes:
      - ./logs:/var/log/healthflow
      - uploads:/tmp/healthflow_uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - healthflow-network

  # ==================== FRONTEND ====================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: healthflow-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - healthflow-network

  # ==================== MONITORING ====================
  prometheus:
    image: prom/prometheus:latest
    container_name: healthflow-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - healthflow-network

  grafana:
    image: grafana/grafana:latest
    container_name: healthflow-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/healthflow.json
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - healthflow-network

# ==================== VOLUMES ====================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==================== NETWORKS ====================
networks:
  healthflow-network:
    driver: bridge
